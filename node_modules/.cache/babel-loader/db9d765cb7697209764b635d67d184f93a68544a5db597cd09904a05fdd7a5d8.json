{"ast":null,"code":"const express = require(\"express\");\nconst CryptoData = require(\"../models/CryptoData\");\nconst router = express.Router();\nrouter.get(\"/deviation\", async (req, res) => {\n  const {\n    coin\n  } = req.query;\n  try {\n    const prices = await CryptoData.find({\n      coin\n    }).sort({\n      timestamp: -1\n    }).limit(100).select(\"price\");\n    if (prices.length === 0) {\n      return res.status(404).json({\n        error: \"No data available for the requested coin\"\n      });\n    }\n    const priceArray = prices.map(doc => doc.price);\n    const mean = priceArray.reduce((sum, price) => sum + price, 0) / priceArray.length;\n    const variance = priceArray.reduce((sum, price) => sum + Math.pow(price - mean, 2), 0) / priceArray.length;\n    const standardDeviation = Math.sqrt(variance);\n    res.json({\n      deviation: standardDeviation.toFixed(2)\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: \"Internal Server Error\"\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","CryptoData","router","Router","get","req","res","coin","query","prices","find","sort","timestamp","limit","select","length","status","json","error","priceArray","map","doc","price","mean","reduce","sum","variance","Math","pow","standardDeviation","sqrt","deviation","toFixed","module","exports"],"sources":["C:/Users/JAYESH/Desktop/KoinX Assignment/src/routes/deviation.js"],"sourcesContent":["const express = require(\"express\");\r\nconst CryptoData = require(\"../models/CryptoData\");\r\nconst router = express.Router();\r\n\r\nrouter.get(\"/deviation\", async (req, res) => {\r\n  const { coin } = req.query;\r\n  try {\r\n    const prices = await CryptoData.find({ coin })\r\n      .sort({ timestamp: -1 })\r\n      .limit(100)\r\n      .select(\"price\");\r\n\r\n    if (prices.length === 0) {\r\n      return res.status(404).json({ error: \"No data available for the requested coin\" });\r\n    }\r\n\r\n    const priceArray = prices.map((doc) => doc.price);\r\n    const mean = priceArray.reduce((sum, price) => sum + price, 0) / priceArray.length;\r\n    const variance =\r\n      priceArray.reduce((sum, price) => sum + Math.pow(price - mean, 2), 0) / priceArray.length;\r\n    const standardDeviation = Math.sqrt(variance);\r\n\r\n    res.json({ deviation: standardDeviation.toFixed(2) });\r\n  } catch (error) {\r\n    res.status(500).json({ error: \"Internal Server Error\" });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AAClD,MAAME,MAAM,GAAGH,OAAO,CAACI,MAAM,CAAC,CAAC;AAE/BD,MAAM,CAACE,GAAG,CAAC,YAAY,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC3C,MAAM;IAAEC;EAAK,CAAC,GAAGF,GAAG,CAACG,KAAK;EAC1B,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMR,UAAU,CAACS,IAAI,CAAC;MAAEH;IAAK,CAAC,CAAC,CAC3CI,IAAI,CAAC;MAAEC,SAAS,EAAE,CAAC;IAAE,CAAC,CAAC,CACvBC,KAAK,CAAC,GAAG,CAAC,CACVC,MAAM,CAAC,OAAO,CAAC;IAElB,IAAIL,MAAM,CAACM,MAAM,KAAK,CAAC,EAAE;MACvB,OAAOT,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAA2C,CAAC,CAAC;IACpF;IAEA,MAAMC,UAAU,GAAGV,MAAM,CAACW,GAAG,CAAEC,GAAG,IAAKA,GAAG,CAACC,KAAK,CAAC;IACjD,MAAMC,IAAI,GAAGJ,UAAU,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEH,KAAK,KAAKG,GAAG,GAAGH,KAAK,EAAE,CAAC,CAAC,GAAGH,UAAU,CAACJ,MAAM;IAClF,MAAMW,QAAQ,GACZP,UAAU,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEH,KAAK,KAAKG,GAAG,GAAGE,IAAI,CAACC,GAAG,CAACN,KAAK,GAAGC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGJ,UAAU,CAACJ,MAAM;IAC3F,MAAMc,iBAAiB,GAAGF,IAAI,CAACG,IAAI,CAACJ,QAAQ,CAAC;IAE7CpB,GAAG,CAACW,IAAI,CAAC;MAAEc,SAAS,EAAEF,iBAAiB,CAACG,OAAO,CAAC,CAAC;IAAE,CAAC,CAAC;EACvD,CAAC,CAAC,OAAOd,KAAK,EAAE;IACdZ,GAAG,CAACU,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAwB,CAAC,CAAC;EAC1D;AACF,CAAC,CAAC;AAEFe,MAAM,CAACC,OAAO,GAAGhC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}